AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  hrtc-sam

  Sample SAM Template for hrtc-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 128

Resources:
  HrtcS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: hrtc-s3-bucket
  HrtcUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "HrtcUsers"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
        - 
          AttributeName: "openid"
          AttributeType: "S"
        - 
          AttributeName: "token"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "openidGSI"
          KeySchema:
            - 
              AttributeName: "openid"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        - 
          IndexName: "tokenGSI"
          KeySchema:
            - 
              AttributeName: "token"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
  HrtcEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "HrtcEvents"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "ownerId"
          AttributeType: "S"
        -
          AttributeName: "locationStatusKey"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "ownerIdGSI"
          KeySchema:
            -
              AttributeName: "ownerId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "locationStatusKeyGSI"
          KeySchema:
            -
              AttributeName: "locationStatusKey"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
  HrtcThreadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "HrtcThreads"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "eventId"
          AttributeType: "S"
        -
          AttributeName: "eventOwnerId"
          AttributeType: "S"
        -
          AttributeName: "userId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "eventIdGSI"
          KeySchema:
            -
              AttributeName: "eventId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "eventOwnerIdGSI"
          KeySchema:
            -
              AttributeName: "eventOwnerId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "userIdGSI"
          KeySchema:
            -
              AttributeName: "userId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  MyAppFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Policies:
      - PolicyDocument: 
          Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - !GetAtt HrtcS3Bucket.Arn
              - !Join [ '',[!GetAtt HrtcS3Bucket.Arn, /*]]
          - Action: [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:UpdateItem",
              "dynamodb:BatchExecuteStatement",
              "dynamodb:BatchWriteItem"
            ]
            Effect: Allow
            Resource:
              - !GetAtt HrtcUsersTable.Arn
              - !Join [ '/',[!GetAtt HrtcUsersTable.Arn, index/*]]
              - !GetAtt HrtcEventsTable.Arn
              - !Join [ '/',[!GetAtt HrtcEventsTable.Arn, index/*]]
              - !GetAtt HrtcThreadsTable.Arn
              - !Join [ '/',[!GetAtt HrtcThreadsTable.Arn, index/*]]
          Version: '2012-10-17'
        PolicyName: 'MyAppFunctionRolePolicy'

  MyAppFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: app.lambda_handler.handle
      Runtime: python3.9
      Architectures:
        - arm64
      Events:
        getProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: get
        postProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: post
        optionsProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: options
      Role:
        !GetAtt MyAppFunctionRole.Arn
      Environment:
        Variables:
          WX_APP_ID: ''
          WX_APP_SECRET: ''

Outputs:
  MyAppApi:
    Description: "API Gateway endpoint URL for Prod stage for My App function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ping"
  MyAppFunction:
    Description: "My App Lambda Function ARN"
    Value: !GetAtt MyAppFunction.Arn
  MyAppFunctionIamRole:
    Description: "Implicit IAM Role created for My App function"
    Value: !GetAtt MyAppFunctionRole.Arn
